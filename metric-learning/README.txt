Немного информации о работе "Interpretation X Metric Learning"

0. Все обучение происходило на kaggle.com с использованием бесплатного 
    недельного доступа к 1 блоку GPU P100.

1. Содержит 3 файла формата .ipynb:

    * final_notebook_triplet_loss.ipynb - ноутбук подготовки, обучения и инференса модели с 
    использованим функции потерь TripletLoss & техники триплетов Hard Mining.

    * final_notebook_arcface_with_gradcam.ipynb - ноутбук подготовки, обучения и инференса модели с
    использованием функции потерь ArcFaceLoss. Дополнительно реализуется метод интерператции пресдказаний
    модели GradCAM.

    * hw7.ipynb - файл домашнего задания.

2. Для обучения использовался модуль lightning_pytorch, продемонстрированный в примерах на гитхабе курса.

3. Для поиска релевантных картинок (инференса) использовался модуль faiss-gpu, также продемонстрированный на 
гитхабе курса.

4. Для следования пунктам ДЗ важные моменты отмечены галочками ✅.

5. dataInfo.txt - файл, который содержит информацию о данных cars196.

6. Folder logs_arcface - папка с фотографиями логов train & val TensorBoard для ArcFaceLoss.

7. Folder logs_triplet_loss - папка с фотографиями логов train & val TensorBoard для TripletLoss.

Финальные мысли:

В целом, модель даёт релевантные предсказания и показывает неплохую точность. Однако есть ряд случаев ошибок модели:

* Иногда модель даёт схожесть/ошибку, обращая внимание на фон изображений. Например, разные марки сэмплов оказываются в 
    embedding-мерном пространстве близко ввиду фотографий, сделанных в салоне, на белом фоне и так далее. Возможно, есть
    смысл воспользоваться готовыми реализациями отделения объекта от фона изображения и подачей в какой-то степени "чистых"
    изображений в сеть. Или же решить преимущественно регрессионную задачу Object Detection по предсказанию рамки объекта 
    с дальнейшим Crop'ом изображения и его подачей в архитектуру. Не очень будет в плане эффективности таскать две не самые 
    легковесные архитектуры, но может быть неплохим решением с позиции точности.

* Визуально автомобили легко различаются по решетке радиатора. Вероятно, вы вспомните, что у разных марок машин все решетки 
    уникальны. Можно как-то хитро обучать по этой особенности изображений, сделав detection именно этих частей, однако мы 
    потерям точность на сэмплах фото "сбоку" или "сзади".

* Модель плохо различает автомобили одной модели, но разных лет выпуска. В таком случае, есть смысл попробовать дообучить её
    на semi-hard mining. Подобные объекты могут оказаться именно в этой категории с точки зрения метрик дистанции. Подобная 
    техника поможет выявить и ошибки разметки, в результате чего можно отправить эти сэмплы на переразметку или обучить модель
    без них, как шумовых объектов.

* При использовании TripletLoss возможно получение объектов внутри батча таким образом, что не окажется пресдтавителей каких-то
    лейблов при многоклассовой классификации. И возможна ситуация, где будет 1 представитель, которому не найдется positive сэмпл.
    Вывод: попробовать увеличить размер батча.

* Попробовать использовать другие подходы к функциями потерь Metric Learning!